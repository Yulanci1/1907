import asyncio
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
from checker import check_slots
import os
from dotenv import load_dotenv

load_dotenv()

TELEGRAM_TOKEN = os.getenv("BOT_TOKEN")
CHAT_ID = os.getenv("CHAT_ID")

async def check_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
available = await check_slots()
msg = "üéâ –î–∞—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –∑–∞–ø–∏—Å–∏!" if available else "üòî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç –Ω–∞ –∑–∞–ø–∏—Å—å."
await update.message.reply_text(msg)

async def notify_once(app):
await asyncio.sleep(10)
previous_status = None

while True:
try:
current = await check_slots()
if previous_status is None: # –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫
previous_status = current
elif current and not previous_status:
# –ë—ã–ª–æ False, —Å—Ç–∞–ª–æ True
await app.bot.send_message(chat_id=CHAT_ID, text="üì¢ –ü–æ—è–≤–∏–ª–∏—Å—å —Å–≤–æ–±–æ–¥–Ω—ã–µ –¥–∞—Ç—ã –Ω–∞ —Å–∞–π—Ç–µ VFS!")
previous_status = current
except Exception as e:
await app.bot.send_message(chat_id=CHAT_ID, text=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ: {e}")

await asyncio.sleep(300) # –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
async def main():
app = ApplicationBuilder().token(BOT_TOKEN).build()

app.add_handler(CommandHandler("check", check_command))
asyncio.create_task(notify_once(app))

print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
await app.run_polling()
